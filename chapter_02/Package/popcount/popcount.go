//popcount函数实现，用于统计64位无符号数中，1bit的个数，采用的查表法。

package popcount

//定义一个长度为256的数组，256代表8位无符号数所能表示的全部数字个数，而存储的是对应下标所带有的1bit的个数。
//存储的类型选择uint8是因为最大的数字255也仅仅含有8个1，所以使用uint8刚刚好。
//示例:  下标为3的位置，存储uint8类型的整数2，因为数字3转换成二进制含有两个1。
var pc [256]uint8

//init函数，用于复杂的初始化。
func init() {
	for i := range pc {
		//byte(i&1)的含义是先取出的下标i和1进行与运算，之后使用byte()显示转换成byte类型的数据，也就是uint8，取最后八位，前面的舍去。作用是计算最后一位是否为。
		//(i/2)是整除，无论i取多少，例如i为3，3->1->0，最后都指向pc[0],不断地计算，最后得出1的个数。
		pc[i] = pc[i/2] + byte(i&1)
	}

}

//传入一个uint64的参数，返回含有的1bit的个数
func PopCount(x uint64) (count int) {
	//这里是右移0，8，16，... ，56位，并取出末尾的8位，根据pc数组来得出含有的1bit的个数，最后相加得出全部的个数。
	count = int(pc[uint8(x>>(0*8))] +
		pc[uint8(x>>(1*8))] +
		pc[uint8(x>>(2*8))] +
		pc[uint8(x>>(3*8))] +
		pc[uint8(x>>(4*8))] +
		pc[uint8(x>>(5*8))] +
		pc[uint8(x>>(6*8))] +
		pc[uint8(x>>(7*8))])
	return

}
